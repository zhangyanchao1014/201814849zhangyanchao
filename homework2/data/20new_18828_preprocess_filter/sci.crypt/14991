subject source got number request code written borland code c nick code segment assume start begin ga particle bit 0 particle moving east bit 1 particle moving west bit 2 particle moving north bit 3 particle moving south bit 4 particle moving east bit 5 particle moving west bit 6 particle moving north bit 7 particle moving south rule 1 ga rule e w n n e w 1100 byte 2 reflection rule swap bit along direction thi table implement two particle collision ga db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db thi rule implement needed run ga evolution reverse called particle hit wall head db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db 55 23 offset offset db db db 256 db db 256 datum db db db db thi test ga based encryption db algorithm datum encoded particle db digital ga whose time evolution db type algorithm decryption db achieved running simulation reverse db argument ensure even single db bit decryption datum possible db db ga let evolve 256 db one either run reverse evolution pressing db space flip bit run pressing 0 db db cryptographic application key would consist db number time step time location db specific bit db db db db db fill ga piece code mov mov datum mov push di push cx mov mov mov inc si inc di loop pop cx pop di add loop mov mov mov mov mov byte ptr al inc si loop display ga molecule around push e push si push di push cx push bx mov mov mov mov mov add push cx push di mov mov mov byte ptr inc si add dec cx pop di pop cx add loop pop bx pop cx pop di pop si pop e datum destination datum first byte special case mov al assembled byte mov north one line lower bit 7 3 blbh assembled byte mov south one line higher bit 6 2 blbh place stuff al mov west one byte left lower bit 5 1 blbh mov east one byte right higher bit 4 0 blbh mov mov ptr offset mov inc si inc di middle byte handled loop mov mov al assembled byte mov north one line lower bit 7 3 blbh assembled byte mov south one line higher bit 6 2 blbh place stuff al mov west one byte left lower bit 5 1 blbh mov east one byte right higher bit 4 0 blbh mov mov ptr offset mov inc si inc di loop last byte also special mov al assembled byte mov north one line lower bit 7 3 blbh assembled byte mov south one line higher bit 6 2 blbh place stuff al mov west one byte left lower bit 5 1 blbh mov east one byte right higher bit 4 0 blbh mov mov ptr offset mov inc si inc di datum destination datum first byte special case mov mov bit 7 3 blbh assembled byte mov bit 6 2 blbh place stuff al mov west one byte left lower bit 5 1 blbh mov east one byte right higher bit 4 0 blbh mov mov ptr offset mov inc si inc di middle byte handled loop mov mov al assembled byte mov bit 7 3 blbh assembled byte mov bit 6 2 blbh place stuff al mov west one byte left lower bit 5 1 blbh mov east one byte right higher bit 4 0 blbh mov mov ptr offset mov inc si inc di loop last byte also special mov al assembled byte mov bit 7 3 blbh assembled byte mov bit 6 2 blbh place stuff al mov west one byte left lower bit 5 1 blbh mov east one byte right higher bit 4 0 blbh mov mov ptr offset mov datum destination datum first byte special case mov al assembled byte mov bit 7 3 blbh assembled byte mov bit 6 2 blbh place stuff al mov west one byte left lower bit 5 1 blbh mov east one byte right higher bit 4 0 blbh mov mov ptr offset mov inc si inc di middle byte handled loop mov mov al assembled byte mov bit 7 3 blbh assembled byte mov bit 6 2 blbh place stuff al mov west one byte left lower bit 5 1 blbh mov east one byte right higher bit 4 0 blbh mov mov ptr offset mov inc si inc di loop last byte also special mov al assembled byte mov bit 7 3 blbh assembled byte mov bit 6 2 blbh place stuff al mov west one byte left lower bit 5 1 blbh mov east one byte right higher bit 4 0 blbh mov mov ptr offset mov inc si inc di velocity ga push bx push cx push si mov mov mov push cx mov mov mov ptr offset mov inc si loop pop cx loop pop si pop cx pop bx mov mov mov mov push si push di call pop di pop si add add mov dont scan first last push si push di push cx call pop cx pop di pop si add add loop push si push di call pop si pop di rule cx time push cx call pop cx call loop rule cx time mov mov offset mov ptr offset xor byte ptr offset inc si loop call call mov mov mov mov mov mov ptr mov ptr ah xor inc si loop mov mov offset mov ptr xor byte ptr inc si loop mov push db 256 push push bx push cx push dx push mov mov int pop pop dx pop cx pop bx pop db 512 offset msg msg db thi message printed db code decrypted using datum db wa applied db every time db function left code db except ga evolution db reversed time 16 256 enough ga begin mov mov mov mov mov int mov mov mov mov int call call mov int push cx mov call call call mov int mov xor byte ptr mov call call call mov int code end end start
